@import './colors';

$break-small: 320px;
$break-medium: 415px;
$break-large: 1024px;

@mixin respond-to($media) {
  @if $media==small-handhelds {
    @media only screen and (max-width: $break-small) {
      @content;
    }
  }

  @else if $media==handhelds {
    @media only screen and (min-width: $break-small + 1) and (max-width: $break-medium - 1) {
      @content;
    }
  }

  @else if $media==medium-screens {
    @media only screen and (min-width: $break-medium + 1) and (max-width: $break-large - 1) {
      @content;
    }
  }

  @else if $media==wide-screens {
    @media only screen and (min-width: $break-large) {
      @content;
    }
  }
}

@mixin cell-style($size) {
  width: $size;
  height: $size;
  padding: 0;
  text-align: center;
  line-height: $size;
  // display: inline-block;
  display: table-cell;
}

.flex-component {
  display: flex;
  align-items: center;
  justify-content: center;

  .wrapper {
    display: inline-block;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 2px 10px 10px 0 rgba(0, 0, 0, 0.2), 4px 10px 10px 0 rgba(0, 0, 0, 0.19);
  }
}

@mixin new-board($size, $color, $bgColor) {
  .new-board {
    $cell-size: $size;
    $cell-selected-bg-color: $color;
    $cell-selected-color: $bgColor;
    $cell-candidate-color: $color;
    $cell-color: $color;
    $height: 40px;
    $padding: 4px;
    background-color: $bgColor;
    * {
      font-family: 'Montserrat', sans-serif;
    }

    .header {
      padding: $padding;
      height: $height;
      display: flex;
      justify-items: center;
      justify-content: space-around;
      align-items: center;
      > div {
        color: $cell-color;
        user-select: none;
        cursor: pointer;
      }
    }

    .row-group {
      padding: $padding;
      .row {
        padding: 0 $padding;
        margin: 0 0-$padding;
        display: flex;
        justify-items: center;

        &.highlight {
          background-color: darken($cell-selected-bg-color, 20%);
          box-shadow: inset 0 7px 9px -7px rgba(0, 0, 0, 0.4), inset 0 -7px 9px -7px rgba(0, 0, 0, 0.4);
        }

        &.bingo-candidate {
          background-color: rgba(darken($cell-selected-bg-color, 20%), $alpha: 0.2);
          .cell.hasValue {
            &:not(.selected) {
              border-width: 2px;
              width: $cell-size - (2 * 2px);
              height: $cell-size - (2 * 2px);
              border-style: solid;
              border-radius: 100%;
              color: $cell-candidate-color;
              border-color: $cell-candidate-color;
              box-shadow: 1px 0 3px 0 rgba(0, 0, 0, 0.2), 3px 0 5px 0 rgba(0, 0, 0, 0.19);
            }
          }
        }

        .cell {
          display: flex;
          width: $cell-size;
          height: $cell-size;
          justify-content: center;
          align-items: center;
          &.hasValue {
            color: $cell-color;
          }

          &.selected {
            border-radius: 100%;
            background-color: $cell-selected-bg-color;
            color: $cell-selected-color;
            font-weight: bold;
            box-shadow: 1px 0 3px 0 rgba(0, 0, 0, 0.2), 3px 0 5px 0 rgba(0, 0, 0, 0.19);
          }
        }
      }
    }
  }
}
